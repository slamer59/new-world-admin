// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

generator dbml {
    provider = "prisma-dbml-generator"
}

datasource db {
    provider = "postgresql"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

// model Post {
//   id        Int      @id @default(autoincrement())
//   name      String
//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt

//   createdBy   User   @relation(fields: [createdById], references: [id])
//   createdById String

//   @@index([name])
// }

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? // @db.Text
    access_token      String? // @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? // @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    //   posts         Post[]
    Roaster       Roaster[]
}

// model VerificationToken {
//     identifier String
//     token      String   @unique
//     expires    DateTime

//     @@unique([identifier, token])
// }

enum Role {
    Bruiser
    Disrupter
    Heal
    Mage
    Ranged
    Support
    Tank
    zzz_lvling
}

enum Spec {
    GA_WH
    SnS_GS
    GS_HA
    GS_Spear
    SnS_Spear
    Healer_DST
    Healer_Clap
    Fire_Ice
    BB_IG
    Fire_BB
    Fire_Rapier
    Bow
    Musket
    IG_VG
    Flail_VG
    SnS_IG_Tank
    IG_VG_Tank
}

enum Poids {
    Medium
    Heavy
    Light
}

enum RuneCoeur {
    Detonate
    Stoneform
    Grasping_Vines
    Bile_Bomb
    Fire_Storm
    Canon_Blast
}

enum PositionWar {
    Cadran
    Point
    Flank
}

enum Role1 {
    HRTK
    Brume
    KCDQ
}

model Player {
    id             Int          @id @default(autoincrement())
    name           String
    level          Int
    role           Role
    role1          Role1? // Define as enum
    spec           Spec
    poids          Poids
    runeCoeur      RuneCoeur
    ticket         Boolean      @default(true)
    discord        Boolean      @default(false)
    gearCheck      Boolean      @default(false)
    pov            Boolean      @default(false)
    statusTicket   String?
    positionWar    PositionWar? // Define as enum
    warXP          String?
    enPause        Boolean      @default(true)
    commentaireAbs String?
    joursPresence  String?
    pasDeWar       Boolean      @default(false)
    merc           Boolean      @default(false)
    roaster        Roaster      @relation(fields: [roasterId], references: [id])
    roasterId      Int
}

model Roaster {
    id        Int      @id @default(autoincrement())
    name      String
    level     Int
    faction   Faction  @relation(fields: [factionId], references: [id])
    factionId Int
    players   Player[]
    ownerId   String   @map("owner_id") // Match the type with User id
    owner     User     @relation(fields: [ownerId], references: [id])
}

model Faction {
    id       Int       @id @default(autoincrement())
    name     String
    roasters Roaster[]
}
