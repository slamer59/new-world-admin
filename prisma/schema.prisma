// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

generator dbml {
    provider = "prisma-dbml-generator"
}

datasource db {
    provider = "postgresql"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

model Status {
    id            Int      @id @default(autoincrement())
    ticket        Boolean  @default(false)
    discord       Boolean  @default(false)
    gear_check    Boolean  @default(false)
    pov           Boolean  @default(false)
    status_ticket String?  @default("")
    Player        Player[]

    @@map(name: "status")
}

model User {
    id         Int      @id @default(autoincrement())
    username   String
    email      String
    created_at DateTime @default(now())
    updated_at DateTime @updatedAt
}

model Player {
    id             Int        @id @default(autoincrement())
    user_id        Int
    character_name String
    level          Level
    faction        Faction
    roles          Role[]
    weight         Weight
    rune_coeur     Rune_Coeur
    spec           Spec
    status         Status     @relation(fields: [status_id], references: [id])
    status_id      Int
    created_at     DateTime   @default(now())
    updated_at     DateTime   @updatedAt
    Group          Group?     @relation(fields: [groupId], references: [id])
    groupId        Int?

    @@map(name: "player")
}

enum Faction {
    Marauders
    Syndicate
    Covenant
}

enum Role {
    Bruiser
    Disrupter
    Heal
    Mage
    Ranged
    Support
    Tank
    zzz_lvling
}

enum Spec {
    GA_WH
    SnS_GS
    GS_HA
    GS_Spear
    SnS_Spear
    Spear_HA
    GA_BB
    Healer_DST
    Healer_Clap
}

enum Weight {
    Light
    Medium
    Heavy
}

enum Rune_Coeur {
    Detonate
    Stoneform
    Fire_Storm
    Grasping_Vines
}

enum Level {
    rookie
    intermediate
    experienced
    veteran
}

model War {
    id         Int      @id @default(autoincrement())
    war_date   DateTime @default(now())
    created_at DateTime @default(now())
    updated_at DateTime @updatedAt
    groups     Group[]
}

model Group {
    id         Int      @id @default(autoincrement())
    players    Player[]
    created_at DateTime @default(now())
    updated_at DateTime @updatedAt
    War        War?     @relation(fields: [warId], references: [id])
    warId      Int?

    @@map(name: "group")
}
