// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

generator dbml {
    provider = "prisma-dbml-generator"
}

// generator zod {
//     provider = "zod-prisma"
//     output   = "./zod" // (default) the directory where generated zod schemas will be saved

//     relationModel = true // (default) Create and export both plain and related models.
//     // relationModel         = "default" // Do not export model without relations.
// relationModel         = false // Do not generate related model

//     modelCase = "PascalCase" // (default) Output models using pascal case (ex. UserModel, PostModel)
//     // modelCase             = "camelCase" // Output models using camel case (ex. userModel, postModel)

//     modelSuffix = "Model" // (default) Suffix to apply to your prisma models when naming Zod schemas

//     // useDecimalJs          = false // (default) represent the prisma Decimal type using as a JS number
//     useDecimalJs = true // represent the prisma Decimal type using Decimal.js (as Prisma does)

//     imports = null // (default) will import the referenced file in generated schemas to be used via imports.someExportedVariable

//     // https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
//     // prismaJsonNullability = true // (default) uses prisma's scheme for JSON field nullability
//     prismaJsonNullability = false // allows null assignment to optional JSON fields
// }

datasource db {
    provider = "postgresql"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

model User {
    id         Int      @id @default(autoincrement())
    name       String
    email      String
    created_at DateTime @default(now())
    updated_at DateTime @updatedAt
    player     Player?
}

model Player {
    id               Int             @id @default(autoincrement())
    name             String
    user             User            @relation(fields: [userId], references: [id])
    userId           Int             @unique
    roles            Role[]
    status           Status          @relation(fields: [statusId], references: [id])
    statusId         Int
    created_at       DateTime        @default(now())
    updated_at       DateTime        @updatedAt
    warComposition   WarComposition? @relation(fields: [warCompositionId], references: [id])
    warCompositionId Int?
}

model PlayerType {
    id             Int              @id @default(autoincrement())
    name           String
    roleType       RoleType
    level          Level            @default(rookie)
    created_at     DateTime         @default(now())
    updated_at     DateTime         @updatedAt
    warComposition WarComposition[]
}

model Role {
    id          Int         @id @default(autoincrement())
    name        String
    roleType    RoleType
    rune        Rune
    weapon      Weapon
    weightLimit WeightLimit
    player      Player?     @relation(fields: [playerId], references: [id])
    playerId    Int?
    created_at  DateTime    @default(now())
    updated_at  DateTime    @updatedAt
}

model Status {
    id            Int      @id @default(autoincrement())
    ticket        Boolean  @default(false)
    discord       Boolean  @default(false)
    gear_check    Boolean  @default(false)
    pov           Boolean  @default(false)
    status_ticket String?  @default("")
    created_at    DateTime @default(now())
    updated_at    DateTime @updatedAt
    player        Player[]
}

// Position of the player in the war
enum WarPosition {
    top_left
    top_right
    bottom_left
    bottom_right
    point
    flank
    flex
}

enum Faction {
    Marauders
    Syndicate
    Covenant
}

enum Weapon {
    Bow
    FireStaff
    GreatAxe
    GreatSword
    Blunderbuss
    Hatchet
    IceGauntlet
    LifeStaff
    Musket
    Rapier
    Spear
    Swords
    WarHammer
    VoidGauntlet
}

enum RoleType {
    Bruiser
    Disrupter
    Heal
    Mage
    Ranged
    Support
    Tank
    Melee
    zzz_lvling
}

enum Rune {
    Detonate
    Stoneform
    FireStorm
    GraspingVines
    BileBomb
    CanonBlast
    DarkAscent
    PrimalFury
    TheDevourer
}

enum WeightLimit {
    Light
    Medium
    Heavy
}

enum Level {
    rookie
    intermediate
    experienced
    veteran
}

model War {
    id         Int      @id @default(autoincrement())
    date       DateTime @default(now())
    created_at DateTime @default(now())
    updated_at DateTime @updatedAt
}

model WarComposition {
    id         Int          @id @default(autoincrement())
    name       String
    position   WarPosition
    slot       Player[]
    created_at DateTime     @default(now())
    updated_at DateTime     @updatedAt
    playerType PlayerType[]
}
