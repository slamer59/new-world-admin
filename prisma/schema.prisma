// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

generator dbml {
    provider = "prisma-dbml-generator"
}

datasource db {
    provider = "postgresql"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

model User {
    id         Int      @id @default(autoincrement())
    username   String
    email      String
    created_at DateTime @default(now())
    updated_at DateTime @updatedAt
    player     Player?
}

model Player {
    id               Int             @id @default(autoincrement())
    name             String
    user             User            @relation(fields: [userId], references: [id])
    userId           Int             @unique
    roles            Role[]
    status           Status          @relation(fields: [statusId], references: [id])
    statusId         Int
    created_at       DateTime        @default(now())
    updated_at       DateTime        @updatedAt
    warComposition   WarComposition? @relation(fields: [warCompositionId], references: [id])
    warCompositionId Int?
}

model PlayerType {
    id               Int             @id @default(autoincrement())
    role             RoleType        @unique
    level            Level           @default(rookie)
    created_at       DateTime        @default(now())
    updated_at       DateTime        @updatedAt
    WarComposition   WarComposition? @relation(fields: [warCompositionId], references: [id])
    warCompositionId Int?
}

model Role {
    id          Int         @id @default(autoincrement())
    role        RoleType
    rune        Rune
    weapon      Weapon
    weightLimit WeightLimit
    player      Player?     @relation(fields: [playerId], references: [id])
    playerId    Int?
    created_at  DateTime    @default(now())
    updated_at  DateTime    @updatedAt
}

model Status {
    id            Int      @id @default(autoincrement())
    ticket        Boolean  @default(false)
    discord       Boolean  @default(false)
    gear_check    Boolean  @default(false)
    pov           Boolean  @default(false)
    status_ticket String?  @default("")
    created_at    DateTime @default(now())
    updated_at    DateTime @updatedAt
    player        Player[]
}

// Position of the player in the war
enum WarPosition {
    top_left
    top_right
    bottom_left
    bottom_right
    point
    flank
    flex
}

enum Faction {
    Marauders
    Syndicate
    Covenant
}

enum Weapon {
    Bow
    FireStaff
    GreatAxe
    GreatSword
    Blunderbuss
    Hatchet
    IceGauntlet
    LifeStaff
    Musket
    Rapier
    Spear
    Swords
    WarHammer
    VoidGauntlet
}

enum RoleType {
    Bruiser
    Disrupter
    Heal
    Mage
    Ranged
    Support
    Tank
    Melee
    zzz_lvling
}

enum Rune {
    Detonate
    Stoneform
    Fire_Storm
    Grasping_Vines
}

enum WeightLimit {
    Light
    Medium
    Heavy
}

enum Level {
    rookie
    intermediate
    experienced
    veteran
}

model War {
    id         Int      @id @default(autoincrement())
    war_date   DateTime @default(now())
    created_at DateTime @default(now())
    updated_at DateTime @updatedAt
}

model WarComposition {
    id         Int          @id @default(autoincrement())
    groupId    Int
    position   WarPosition
    slot       Player[]
    playerType PlayerType[]
    created_at DateTime     @default(now())
    updated_at DateTime     @updatedAt
}
